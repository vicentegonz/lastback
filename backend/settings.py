"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import datetime
import os
from pathlib import Path

import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "default-secret-key")

API_KEY_CUSTOM_HEADER = "HTTP_X_API_KEY"

FORECAST_ARN = os.environ.get("FORECAST_ARN")

GOOGLE_CLIENT_ID_EXPO = os.environ.get("GOOGLE_CLIENT_ID_EXPO")
GOOGLE_CLIENT_ID_ANDROID = os.environ.get("GOOGLE_CLIENT_ID_ANDROID")
GOOGLE_CLIENT_ID_IOS = os.environ.get("GOOGLE_CLIENT_ID_IOS")
DATASETGROUP_ARN = os.environ.get("DATASETGROUP_ARN")
S3_BUCKET = os.environ.get("S3_BUCKET")
S3_BUCKET_ROUTE = os.environ.get("S3_BUCKET_ROUTE")

GOOGLE_CLIENT_IDS = list(
    filter(
        lambda x: x is not None,
        [GOOGLE_CLIENT_ID_EXPO, GOOGLE_CLIENT_ID_ANDROID, GOOGLE_CLIENT_ID_IOS],
    )
)

DJANGO_ENV = os.environ.get("DJANGO_ENV")
ALLOWED_HOSTS = "*"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.environ.get("DEBUG") == "True") or (DJANGO_ENV != "production")


# REST Framework
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 5,
}

JWT_LIFETIME = int(os.environ.get("JWT_LIFETIME", "60"))  # minutes
JWT_REFRESH_LIFETIME = int(os.environ.get("JWT_REFRESH_LIFETIME", "24"))  # hours
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(minutes=JWT_LIFETIME),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(hours=JWT_REFRESH_LIFETIME),
    "ROTATE_REFRESH_TOKENS": True,
}


AUTH_USER_MODEL = "accounts.User"
# Application definition


INSTALLED_APPS = [
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "rest_framework",
    "rest_framework_api_key",
    "corsheaders",
    "rest_framework_simplejwt.token_blacklist",
    "backend.docs.apps.DocsConfig",
    "backend.accounts.apps.AccountsConfig",
    "backend.operations.apps.OperationsConfig",
    "backend.authentication.apps.AuthenticationConfig",
    "backend.forecast.apps.ForecastConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "backend.urls"

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DATABASE_NAME", "postgres"),
        "USER": os.environ.get("DATABASE_USER", "postgres"),
        "PASSWORD": os.environ.get("DATABASE_PASSWORD"),
        "HOST": os.environ.get("DATABASE_HOST", "db"),
        "PORT": os.environ.get("DATABASE_PORT", 5432),
    },
}

# Configure DATABASE_URL as the main database
if "DATABASE_URL" in os.environ:
    DATABASES["default"] = dj_database_url.config(ssl_require=True)


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Logging
# https://docs.djangoproject.com/en/3.2/topics/logging/

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": (
                "[%(asctime)s] [%(process)d] [%(levelname)s] "
                "[pathname=%(pathname)s lineno=%(lineno)s]"
                "[funcname=%(funcName)s] %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "simple": {"format": "%(levelname)s %(message)s"},
    },
    "handlers": {
        "null": {"level": "DEBUG", "class": "logging.NullHandler"},
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "root": {"handlers": ["console"], "level": "INFO"},
}

PROPAGATE_EXCEPTIONS = True

# Templates
# https://docs.djangoproject.com/en/3.2/topics/templates/#configuration

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
            ]
        },
    }
]

# Authentication backends
AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)

CORS_ALLOWED_ORIGINS = ["http://localhost:3000"] + list(
    filter(lambda x: x, os.environ.get("ALLOWED_ORIGINS", "").split(" "))
)
